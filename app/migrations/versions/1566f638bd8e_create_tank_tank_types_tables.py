"""Create Tank & Tank Types tables

Revision ID: 1566f638bd8e
Revises: 9175bddab573
Create Date: 2024-08-29 13:53:37.679361

"""

from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID

# revision identifiers, used by Alembic.
revision: str = "1566f638bd8e"
down_revision: Union[str, None] = "9175bddab573"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tank_types",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            primary_key=True,
            server_default=sa.text("uuid_generate_v4()"),
        ),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("capacity", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "tanks",
        sa.Column(
            "id",
            UUID(as_uuid=True),
            primary_key=True,
            server_default=sa.text("uuid_generate_v4()"),
        ),
        sa.Column("type_id", sa.UUID(), nullable=False),
        sa.Column("client_id", sa.UUID(), nullable=False),
        sa.Column("delivered", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["client_id"],
            ["clients.id"],
        ),
        sa.ForeignKeyConstraint(
            ["type_id"],
            ["tank_types.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )

    op.create_unique_constraint(None, "clients", ["id"])
    # ### end Alembic commands ###

    op.bulk_insert(
        sa.table(
            "tank_types",
            sa.Column("name", sa.String(64)),
            sa.Column("price", sa.Float()),
            sa.Column("capacity", sa.Integer()),
        ),
        [
            {"name": "L10", "price": 50.0, "capacity": 10},
            {"name": "L18", "price": 100.0, "capacity": 18},
            {"name": "L25", "price": 150.0, "capacity": 25},
            {"name": "L32", "price": 200.0, "capacity": 32},
            {"name": "L40", "price": 250.0, "capacity": 40},
            {"name": "L50", "price": 300.0, "capacity": 50},
        ],
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "clients", type_="unique")
    op.drop_table("tanks")
    op.drop_table("tank_types")
    # ### end Alembic commands ###
